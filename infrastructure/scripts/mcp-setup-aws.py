#!/usr/bin/env python3
"""
ITSANDBOX AWS „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà (MCPÂØæÂøú)
MCP„Çµ„Éº„Éê„Éº„ÅÆÊÉÖÂ†±„ÇíÊ¥ªÁî®„Åó„Å¶AWSÁí∞Â¢É„ÇíÊßãÁØâ
"""

import json
import boto3
import logging
import argparse
import time
import os
import sys
from typing import Dict, List, Any, Optional
from botocore.exceptions import ClientError, BotoCoreError

# „É≠„Ç∞Ë®≠ÂÆö
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ITSANDBOXAWSSetup:
    """ITSANDBOX AWSÁí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÇØ„É©„Çπ"""
    
    def __init__(self, profile: Optional[str] = None, region: str = 'us-east-1'):
        self.region = region
        
        # AWS„Çª„ÉÉ„Ç∑„Éß„É≥ÂàùÊúüÂåñ
        try:
            if profile:
                session = boto3.Session(profile_name=profile)
            else:
                session = boto3.Session()
            
            # „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàùÊúüÂåñ
            self.organizations = session.client('organizations', region_name=region)
            self.iam = session.client('iam', region_name=region)
            self.sts = session.client('sts', region_name=region)
            self.budgets = session.client('budgets', region_name=region)
            self.sns = session.client('sns', region_name=region)
            self.s3 = session.client('s3', region_name=region)
            self.dynamodb = session.client('dynamodb', region_name=region)
            
            # ÁèæÂú®„ÅÆ„Ç¢„Ç´„Ç¶„É≥„ÉàÊÉÖÂ†±ÂèñÂæó
            self.current_account = self.sts.get_caller_identity()
            logger.info(f"‚úÖ AWSË®≠ÂÆöÂÆå‰∫Ü - „Ç¢„Ç´„Ç¶„É≥„Éà: {self.current_account['Account']}")
            
        except Exception as e:
            logger.error(f"‚ùå AWSË®≠ÂÆö„Ç®„É©„Éº: {str(e)}")
            raise
    
    def check_prerequisites(self) -> bool:
        """ÂâçÊèêÊù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ"""
        logger.info("üîç ÂâçÊèêÊù°‰ª∂„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...")
        
        try:
            # Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
            self.sts.get_caller_identity()
            logger.info("‚úÖ AWSË™çË®ºÊÉÖÂ†±Á¢∫Ë™çÊ∏à„Åø")
            
            # OrganizationsÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
            try:
                self.organizations.describe_organization()
                logger.info("‚úÖ OrganizationsÊ®©ÈôêÁ¢∫Ë™çÊ∏à„Åø")
            except ClientError as e:
                if e.response['Error']['Code'] == 'AWSOrganizationsNotInUseException':
                    logger.info("‚ÑπÔ∏è  OrganizationÊú™‰ΩúÊàêÔºà‰ΩúÊàê‰∫àÂÆöÔºâ")
                else:
                    logger.warning(f"‚ö†Ô∏è  OrganizationsÊ®©ÈôêÂà∂Èôê: {e}")
            
            # IAMÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
            try:
                self.iam.list_users(MaxItems=1)
                logger.info("‚úÖ IAMÊ®©ÈôêÁ¢∫Ë™çÊ∏à„Åø")
            except ClientError as e:
                logger.error(f"‚ùå IAMÊ®©Èôê‰∏çË∂≥: {e}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå ÂâçÊèêÊù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó: {str(e)}")
            return False
    
    def create_organization(self) -> Optional[str]:
        """AWS Organization‰ΩúÊàê"""
        logger.info("üè¢ AWS Organization‰ΩúÊàê‰∏≠...")
        
        try:
            # Êó¢Â≠òOrganizationÁ¢∫Ë™ç
            try:
                org = self.organizations.describe_organization()
                org_id = org['Organization']['Id']
                logger.info(f"‚úÖ Êó¢Â≠òOrganizationÁô∫Ë¶ã: {org_id}")
                return org_id
            except ClientError as e:
                if e.response['Error']['Code'] != 'AWSOrganizationsNotInUseException':
                    raise
            
            # Êñ∞Ë¶èOrganization‰ΩúÊàê
            org_response = self.organizations.create_organization(FeatureSet='ALL')
            org_id = org_response['Organization']['Id']
            
            logger.info(f"‚úÖ Organization‰ΩúÊàêÂÆå‰∫Ü: {org_id}")
            
            # OrganizationÊÉÖÂ†±‰øùÂ≠ò
            with open('organization-info.json', 'w') as f:
                json.dump(org_response, f, indent=2, default=str)
            
            return org_id
            
        except Exception as e:
            logger.error(f"‚ùå Organization‰ΩúÊàêÂ§±Êïó: {str(e)}")
            return None
    
    def create_organizational_units(self) -> Dict[str, str]:
        """Organizational Units‰ΩúÊàê"""
        logger.info("üìÅ Organizational Units‰ΩúÊàê‰∏≠...")
        
        ous = {
            'Core': 'Core accounts for shared services',
            'Projects': 'Project-specific development accounts',
            'Sandbox': 'Individual sandbox environments'
        }
        
        created_ous = {}
        
        try:
            # Root OUÂèñÂæó
            roots = self.organizations.list_roots()
            root_id = roots['Roots'][0]['Id']
            
            for ou_name, description in ous.items():
                try:
                    # Êó¢Â≠òOUÁ¢∫Ë™ç
                    existing_ous = self.organizations.list_organizational_units_for_parent(
                        ParentId=root_id
                    )
                    
                    existing_ou = None
                    for ou in existing_ous['OrganizationalUnits']:
                        if ou['Name'] == ou_name:
                            existing_ou = ou
                            break
                    
                    if existing_ou:
                        created_ous[ou_name] = existing_ou['Id']
                        logger.info(f"‚úÖ Êó¢Â≠òOUÁô∫Ë¶ã: {ou_name} ({existing_ou['Id']})")
                    else:
                        # Êñ∞Ë¶èOU‰ΩúÊàê
                        ou_response = self.organizations.create_organizational_unit(
                            ParentId=root_id,
                            Name=ou_name
                        )
                        created_ous[ou_name] = ou_response['OrganizationalUnit']['Id']
                        logger.info(f"‚úÖ OU‰ΩúÊàêÂÆå‰∫Ü: {ou_name} ({ou_response['OrganizationalUnit']['Id']})")
                
                except Exception as e:
                    logger.error(f"‚ùå OU‰ΩúÊàêÂ§±Êïó {ou_name}: {str(e)}")
            
            return created_ous
            
        except Exception as e:
            logger.error(f"‚ùå OU‰ΩúÊàêÂá¶ÁêÜÂ§±Êïó: {str(e)}")
            return {}
    
    def setup_iam_policies(self) -> Dict[str, str]:
        """IAM„Éù„É™„Ç∑„Éº‰ΩúÊàê"""
        logger.info("üîê IAM„Éù„É™„Ç∑„Éº‰ΩúÊàê‰∏≠...")
        
        policies = {}
        
        # Âü∫Êú¨„Éù„É™„Ç∑„ÉºÂÆöÁæ©
        policy_definitions = {
            'ITSANDBOXDeveloperPolicy': {
                'description': 'ITSANDBOX developer permissions',
                'document': {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:*",
                                "s3:GetObject",
                                "s3:PutObject",
                                "s3:ListBucket",
                                "dynamodb:GetItem",
                                "dynamodb:PutItem",
                                "dynamodb:UpdateItem",
                                "dynamodb:Query",
                                "cloudwatch:GetMetricStatistics",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "StringEquals": {
                                    "aws:RequestedRegion": ["us-east-1", "ap-northeast-1"]
                                }
                            }
                        }
                    ]
                }
            },
            'ITSANDBOXPermissionsBoundary': {
                'description': 'ITSANDBOX permissions boundary',
                'document': {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:*",
                                "s3:*",
                                "dynamodb:*",
                                "cloudwatch:*",
                                "logs:*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Deny",
                            "Action": [
                                "ec2:*",
                                "rds:*",
                                "organizations:*"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        }
        
        for policy_name, policy_config in policy_definitions.items():
            try:
                # Êó¢Â≠ò„Éù„É™„Ç∑„ÉºÁ¢∫Ë™ç
                try:
                    policy_arn = f"arn:aws:iam::{self.current_account['Account']}:policy/itsandbox/{policy_name}"
                    self.iam.get_policy(PolicyArn=policy_arn)
                    policies[policy_name] = policy_arn
                    logger.info(f"‚úÖ Êó¢Â≠ò„Éù„É™„Ç∑„ÉºÁô∫Ë¶ã: {policy_name}")
                    continue
                except ClientError as e:
                    if e.response['Error']['Code'] != 'NoSuchEntity':
                        raise
                
                # Êñ∞Ë¶è„Éù„É™„Ç∑„Éº‰ΩúÊàê
                response = self.iam.create_policy(
                    PolicyName=policy_name,
                    Path='/itsandbox/',
                    Description=policy_config['description'],
                    PolicyDocument=json.dumps(policy_config['document'])
                )
                
                policies[policy_name] = response['Policy']['Arn']
                logger.info(f"‚úÖ „Éù„É™„Ç∑„Éº‰ΩúÊàêÂÆå‰∫Ü: {policy_name}")
                
            except Exception as e:
                logger.error(f"‚ùå „Éù„É™„Ç∑„Éº‰ΩúÊàêÂ§±Êïó {policy_name}: {str(e)}")
        
        return policies
    
    def setup_iam_roles(self, policies: Dict[str, str]) -> Dict[str, str]:
        """IAM„É≠„Éº„É´‰ΩúÊàê"""
        logger.info("üë• IAM„É≠„Éº„É´‰ΩúÊàê‰∏≠...")
        
        roles = {}
        
        # Âü∫Êú¨„É≠„Éº„É´ÂÆöÁæ©
        role_definitions = {
            'ITSANDBOXDeveloperRole': {
                'description': 'ITSANDBOX developer role',
                'assume_role_policy': {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": f"arn:aws:iam::{self.current_account['Account']}:root"
                            },
                            "Action": "sts:AssumeRole",
                            "Condition": {
                                "StringEquals": {
                                    "sts:ExternalId": "ITSANDBOX-2024-Dev"
                                }
                            }
                        }
                    ]
                },
                'attached_policies': ['ITSANDBOXDeveloperPolicy'],
                'permissions_boundary': 'ITSANDBOXPermissionsBoundary'
            }
        }
        
        for role_name, role_config in role_definitions.items():
            try:
                # Êó¢Â≠ò„É≠„Éº„É´Á¢∫Ë™ç
                try:
                    role_response = self.iam.get_role(RoleName=role_name)
                    roles[role_name] = role_response['Role']['Arn']
                    logger.info(f"‚úÖ Êó¢Â≠ò„É≠„Éº„É´Áô∫Ë¶ã: {role_name}")
                    continue
                except ClientError as e:
                    if e.response['Error']['Code'] != 'NoSuchEntity':
                        raise
                
                # Êñ∞Ë¶è„É≠„Éº„É´‰ΩúÊàê
                create_params = {
                    'RoleName': role_name,
                    'Path': '/itsandbox/',
                    'AssumeRolePolicyDocument': json.dumps(role_config['assume_role_policy']),
                    'Description': role_config['description']
                }
                
                # Permissions BoundaryË®≠ÂÆö
                if role_config.get('permissions_boundary') and role_config['permissions_boundary'] in policies:
                    create_params['PermissionsBoundary'] = policies[role_config['permissions_boundary']]
                
                role_response = self.iam.create_role(**create_params)
                roles[role_name] = role_response['Role']['Arn']
                
                # „Éù„É™„Ç∑„Éº„Ç¢„Çø„ÉÉ„ÉÅ
                for policy_name in role_config.get('attached_policies', []):
                    if policy_name in policies:
                        self.iam.attach_role_policy(
                            RoleName=role_name,
                            PolicyArn=policies[policy_name]
                        )
                
                logger.info(f"‚úÖ „É≠„Éº„É´‰ΩúÊàêÂÆå‰∫Ü: {role_name}")
                
            except Exception as e:
                logger.error(f"‚ùå „É≠„Éº„É´‰ΩúÊàêÂ§±Êïó {role_name}: {str(e)}")
        
        return roles
    
    def setup_cost_management(self) -> bool:
        """„Ç≥„Çπ„ÉàÁÆ°ÁêÜË®≠ÂÆö"""
        logger.info("üí∞ „Ç≥„Çπ„ÉàÁÆ°ÁêÜË®≠ÂÆö‰∏≠...")
        
        try:
            # ‰∫àÁÆó‰ΩúÊàê
            budget_name = 'ITSANDBOX-Monthly-Budget'
            
            try:
                # Êó¢Â≠ò‰∫àÁÆóÁ¢∫Ë™ç
                self.budgets.describe_budget(
                    AccountId=self.current_account['Account'],
                    BudgetName=budget_name
                )
                logger.info(f"‚úÖ Êó¢Â≠ò‰∫àÁÆóÁô∫Ë¶ã: {budget_name}")
                return True
                
            except ClientError as e:
                if e.response['Error']['Code'] != 'NotFoundException':
                    raise
            
            # Êñ∞Ë¶è‰∫àÁÆó‰ΩúÊàê
            budget = {
                'BudgetName': budget_name,
                'BudgetType': 'COST',
                'TimeUnit': 'MONTHLY',
                'BudgetLimit': {
                    'Amount': '100.0',
                    'Unit': 'USD'
                },
                'CostFilters': {},
                'TimePeriod': {
                    'Start': '2024-01-01',
                    'End': '2087-06-15'
                }
            }
            
            # ÈÄöÁü•Ë®≠ÂÆö
            notification = {
                'NotificationType': 'ACTUAL',
                'ComparisonOperator': 'GREATER_THAN',
                'Threshold': 80.0,
                'ThresholdType': 'PERCENTAGE'
            }
            
            subscriber = {
                'SubscriptionType': 'EMAIL',
                'Address': 'hoseiitsandbox@gmail.com'
            }
            
            self.budgets.create_budget(
                AccountId=self.current_account['Account'],
                Budget=budget,
                NotificationsWithSubscribers=[
                    {
                        'Notification': notification,
                        'Subscribers': [subscriber]
                    }
                ]
            )
            
            logger.info(f"‚úÖ ‰∫àÁÆó‰ΩúÊàêÂÆå‰∫Ü: {budget_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå „Ç≥„Çπ„ÉàÁÆ°ÁêÜË®≠ÂÆöÂ§±Êïó: {str(e)}")
            return False
    
    def setup_shared_resources(self) -> Dict[str, str]:
        """ÂÖ±Êúâ„É™„ÇΩ„Éº„Çπ‰ΩúÊàê"""
        logger.info("üóÇÔ∏è ÂÖ±Êúâ„É™„ÇΩ„Éº„Çπ‰ΩúÊàê‰∏≠...")
        
        resources = {}
        
        try:
            # S3„Éê„Ç±„ÉÉ„Éà‰ΩúÊàê
            bucket_name = f"itsandbox-shared-{self.current_account['Account']}-{int(time.time())}"
            
            try:
                if self.region == 'us-east-1':
                    self.s3.create_bucket(Bucket=bucket_name)
                else:
                    self.s3.create_bucket(
                        Bucket=bucket_name,
                        CreateBucketConfiguration={'LocationConstraint': self.region}
                    )
                
                # „Éê„Ç±„ÉÉ„ÉàÊöóÂè∑ÂåñË®≠ÂÆö
                self.s3.put_bucket_encryption(
                    Bucket=bucket_name,
                    ServerSideEncryptionConfiguration={
                        'Rules': [
                            {
                                'ApplyServerSideEncryptionByDefault': {
                                    'SSEAlgorithm': 'AES256'
                                }
                            }
                        ]
                    }
                )
                
                # „Éë„Éñ„É™„ÉÉ„ÇØ„Ç¢„ÇØ„Çª„Çπ„Éñ„É≠„ÉÉ„ÇØ
                self.s3.put_public_access_block(
                    Bucket=bucket_name,
                    PublicAccessBlockConfiguration={
                        'BlockPublicAcls': True,
                        'IgnorePublicAcls': True,
                        'BlockPublicPolicy': True,
                        'RestrictPublicBuckets': True
                    }
                )
                
                resources['s3_bucket'] = bucket_name
                logger.info(f"‚úÖ S3„Éê„Ç±„ÉÉ„Éà‰ΩúÊàêÂÆå‰∫Ü: {bucket_name}")
                
            except Exception as e:
                logger.error(f"‚ùå S3„Éê„Ç±„ÉÉ„Éà‰ΩúÊàêÂ§±Êïó: {str(e)}")
            
            # DynamoDB„ÉÜ„Éº„Éñ„É´‰ΩúÊàê
            table_name = 'itsandbox-terraform-locks'
            
            try:
                self.dynamodb.create_table(
                    TableName=table_name,
                    KeySchema=[
                        {
                            'AttributeName': 'LockID',
                            'KeyType': 'HASH'
                        }
                    ],
                    AttributeDefinitions=[
                        {
                            'AttributeName': 'LockID',
                            'AttributeType': 'S'
                        }
                    ],
                    BillingMode='PAY_PER_REQUEST',
                    Tags=[
                        {
                            'Key': 'Project',
                            'Value': 'ITSANDBOX'
                        },
                        {
                            'Key': 'Purpose',
                            'Value': 'TerraformLocking'
                        }
                    ]
                )
                
                resources['dynamodb_table'] = table_name
                logger.info(f"‚úÖ DynamoDB„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂÆå‰∫Ü: {table_name}")
                
            except ClientError as e:
                if e.response['Error']['Code'] == 'ResourceInUseException':
                    resources['dynamodb_table'] = table_name
                    logger.info(f"‚úÖ Êó¢Â≠òDynamoDB„ÉÜ„Éº„Éñ„É´Áô∫Ë¶ã: {table_name}")
                else:
                    logger.error(f"‚ùå DynamoDB„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂ§±Êïó: {str(e)}")
            
        except Exception as e:
            logger.error(f"‚ùå ÂÖ±Êúâ„É™„ÇΩ„Éº„Çπ‰ΩúÊàêÂ§±Êïó: {str(e)}")
        
        return resources
    
    def generate_terraform_backend_config(self, resources: Dict[str, str]) -> bool:
        """Terraform„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË®≠ÂÆöÁîüÊàê"""
        logger.info("üìù Terraform„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË®≠ÂÆöÁîüÊàê‰∏≠...")
        
        try:
            if 's3_bucket' not in resources or 'dynamodb_table' not in resources:
                logger.warning("‚ö†Ô∏è S3„Éê„Ç±„ÉÉ„Éà„Åæ„Åü„ÅØDynamoDB„ÉÜ„Éº„Éñ„É´„Åå‰∏çË∂≥")
                return False
            
            backend_config = f"""# ITSANDBOX Terraform Backend Configuration
# Ëá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü: {time.strftime('%Y-%m-%d %H:%M:%S')}

terraform {{
  backend "s3" {{
    bucket         = "{resources['s3_bucket']}"
    key            = "itsandbox/terraform.tfstate"
    region         = "{self.region}"
    encrypt        = true
    dynamodb_table = "{resources['dynamodb_table']}"
  }}
}}
"""
            
            with open('terraform-backend.tf', 'w') as f:
                f.write(backend_config)
            
            # terraform.tfvarsÁîüÊàê
            tfvars_content = f"""# ITSANDBOX Terraform Variables
# Ëá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü: {time.strftime('%Y-%m-%d %H:%M:%S')}

# AWS Configuration
aws_region = "{self.region}"
master_account_id = "{self.current_account['Account']}"

# Organization Configuration
organization_id = "UPDATE_AFTER_TERRAFORM_APPLY"
external_id = "ITSANDBOX-2024-SecureExternalId-{int(time.time())}"

# Cost Management
organization_budget_limit = "100"

# Admin Configuration
admin_emails = ["hoseiitsandbox@gmail.com"]
security_notification_email = "hoseiitsandbox@gmail.com"

# Project Teams (Êõ¥Êñ∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ)
website_project_leads = []
website_developers = []
api_project_leads = []
api_developers = []
infra_project_leads = []
infra_developers = []
sandbox_project_leads = []
sandbox_developers = []

# Domain Configuration
domain_name = "itsandbox.hosei.ac.jp"
create_hosted_zone = false
create_ssl_certificate = false
"""
            
            with open('terraform.tfvars', 'w') as f:
                f.write(tfvars_content)
            
            logger.info("‚úÖ Terraform„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË®≠ÂÆöÁîüÊàêÂÆå‰∫Ü")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Terraform„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË®≠ÂÆöÁîüÊàêÂ§±Êïó: {str(e)}")
            return False
    
    def generate_setup_summary(self, organization_id: Optional[str], policies: Dict[str, str], 
                             roles: Dict[str, str], resources: Dict[str, str]) -> None:
        """„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Çµ„Éû„É™„ÉºÁîüÊàê"""
        logger.info("üìã „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Çµ„Éû„É™„ÉºÁîüÊàê‰∏≠...")
        
        summary = {
            'setup_timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'aws_account': self.current_account['Account'],
            'aws_region': self.region,
            'organization_id': organization_id,
            'created_policies': policies,
            'created_roles': roles,
            'created_resources': resources,
            'next_steps': [
                "1. terraform.tfvars „Éï„Ç°„Ç§„É´„ÇíÁ∑®ÈõÜ„Åó„Å¶„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÅ„Éº„É†ÊÉÖÂ†±„ÇíËøΩÂä†",
                "2. terraform init „ÇíÂÆüË°å„Åó„Å¶„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÇíÂàùÊúüÂåñ",
                "3. terraform plan „ÇíÂÆüË°å„Åó„Å¶Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç",
                "4. terraform apply „ÇíÂÆüË°å„Åó„Å¶„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê",
                "5. Êñ∞Ë¶è„É°„É≥„Éê„Éº„Çí„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞"
            ]
        }
        
        with open('itsandbox-setup-summary.json', 'w') as f:
            json.dump(summary, f, indent=2, default=str)
        
        # „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„É¨„Éù„Éº„ÉàÁîüÊàê
        md_content = f"""# ITSANDBOX AWS „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Çµ„Éû„É™„Éº

**ÂÆüË°åÊó•ÊôÇ**: {summary['setup_timestamp']}  
**AWS„Ç¢„Ç´„Ç¶„É≥„Éà**: {summary['aws_account']}  
**„É™„Éº„Ç∏„Éß„É≥**: {summary['aws_region']}  
**Organization ID**: {organization_id or 'N/A'}

## ‰ΩúÊàê„Åï„Çå„Åü„É™„ÇΩ„Éº„Çπ

### IAM„Éù„É™„Ç∑„Éº
"""
        for policy_name, policy_arn in policies.items():
            md_content += f"- **{policy_name}**: `{policy_arn}`\n"
        
        md_content += "\n### IAM„É≠„Éº„É´\n"
        for role_name, role_arn in roles.items():
            md_content += f"- **{role_name}**: `{role_arn}`\n"
        
        md_content += "\n### ÂÖ±Êúâ„É™„ÇΩ„Éº„Çπ\n"
        for resource_type, resource_name in resources.items():
            md_content += f"- **{resource_type}**: `{resource_name}`\n"
        
        md_content += f"""
## Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó

{chr(10).join([f"{step}" for step in summary['next_steps']])}

## ÈáçË¶Å„Å™Ê≥®ÊÑè‰∫ãÈ†Ö

‚ö†Ô∏è **„Çª„Ç≠„É•„É™„ÉÜ„Ç£**
- External ID „ÇíÂÆâÂÖ®„Å´‰øùÁÆ°„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- Root „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆMFA„ÇíÂøÖ„ÅöÊúâÂäπÂåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- „Ç¢„ÇØ„Çª„Çπ„Ç≠„Éº„ÅÆ‰ª£„Çè„Çä„Å´IAM Role„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ

üí∞ **„Ç≥„Çπ„ÉàÁÆ°ÁêÜ**
- ÊúàÈ°ç$100„ÅÆ‰∫àÁÆóÁõ£Ë¶ñ„ÅåÊúâÂäπ„Åß„Åô
- ‰∫àÁÆó„ÅÆ80%„Å´ÈÅî„Åô„Çã„Å®„Ç¢„É©„Éº„Éà„ÅåÈÄÅ‰ø°„Åï„Çå„Åæ„Åô
- ‰∏çË¶Å„Å™„É™„ÇΩ„Éº„Çπ„ÅØÂÆöÊúüÁöÑ„Å´ÂâäÈô§„Åó„Å¶„Åè„Å†„Åï„ÅÑ

üìß **„ÅäÂïè„ÅÑÂêà„Çè„Åõ**
- ÁÆ°ÁêÜËÄÖ: hoseiitsandbox@gmail.com
"""
        
        with open('ITSANDBOX-Setup-Report.md', 'w') as f:
            f.write(md_content)
        
        logger.info("‚úÖ „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Çµ„Éû„É™„ÉºÁîüÊàêÂÆå‰∫Ü")

def main():
    """„É°„Ç§„É≥Èñ¢Êï∞"""
    parser = argparse.ArgumentParser(description='ITSANDBOX AWS Setup Script')
    parser.add_argument('--profile', help='AWS profile name')
    parser.add_argument('--region', default='us-east-1', help='AWS region')
    parser.add_argument('--dry-run', action='store_true', help='Dry run mode')
    
    args = parser.parse_args()
    
    print("üöÄ ITSANDBOX AWS „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà")
    print("=" * 50)
    
    try:
        # „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂàùÊúüÂåñ
        setup = ITSANDBOXAWSSetup(profile=args.profile, region=args.region)
        
        # ÂâçÊèêÊù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ
        if not setup.check_prerequisites():
            logger.error("‚ùå ÂâçÊèêÊù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó")
            sys.exit(1)
        
        if args.dry_run:
            logger.info("üß™ „Éâ„É©„Ç§„É©„É≥„É¢„Éº„Éâ - ÂÆüÈöõ„ÅÆÂ§âÊõ¥„ÅØË°å„ÅÑ„Åæ„Åõ„Çì")
            return
        
        # AWS Organization‰ΩúÊàê
        organization_id = setup.create_organization()
        
        # OU‰ΩúÊàê
        ous = setup.create_organizational_units()
        
        # IAM„Éù„É™„Ç∑„Éº‰ΩúÊàê
        policies = setup.setup_iam_policies()
        
        # IAM„É≠„Éº„É´‰ΩúÊàê
        roles = setup.setup_iam_roles(policies)
        
        # „Ç≥„Çπ„ÉàÁÆ°ÁêÜË®≠ÂÆö
        setup.setup_cost_management()
        
        # ÂÖ±Êúâ„É™„ÇΩ„Éº„Çπ‰ΩúÊàê
        resources = setup.setup_shared_resources()
        
        # Terraform„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË®≠ÂÆöÁîüÊàê
        setup.generate_terraform_backend_config(resources)
        
        # „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Çµ„Éû„É™„ÉºÁîüÊàê
        setup.generate_setup_summary(organization_id, policies, roles, resources)
        
        print("\nüéâ ITSANDBOX AWS „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü!")
        print("=" * 50)
        print("üìã Ë©≥Á¥∞„É¨„Éù„Éº„Éà: ITSANDBOX-Setup-Report.md")
        print("‚ö° Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó: terraform.tfvars „ÇíÁ∑®ÈõÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è „É¶„Éº„Ç∂„Éº„Å´„Çà„Çä„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂ§±Êïó: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()